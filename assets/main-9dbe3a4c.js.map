{"version":3,"file":"main-9dbe3a4c.js","sources":["../../src/utils/dom.ts","../../src/components/toast.ts","../../src/main-service-account.ts","../../src/services/drive-service-account.ts","../../src/components/file-display.ts","../../src/utils/search.ts","../../src/utils/config.ts"],"sourcesContent":["/**\n * DOM utility functions\n */\n\nexport const getDOMElement = <T extends HTMLElement>(id: string): T => {\n  const element = document.getElementById(id) as T;\n  if (!element) {\n    throw new Error(`Element with id \"${id}\" not found`);\n  }\n  return element;\n};\n\nexport const queryElement = <T extends HTMLElement>(selector: string): T => {\n  const element = document.querySelector(selector) as T;\n  if (!element) {\n    throw new Error(`Element with selector \"${selector}\" not found`);\n  }\n  return element;\n};\n\nexport const queryElements = <T extends HTMLElement>(selector: string): NodeListOf<T> => {\n  return document.querySelectorAll(selector) as NodeListOf<T>;\n};\n\nexport const createElement = <T extends keyof HTMLElementTagNameMap>(\n  tagName: T,\n  className?: string,\n  textContent?: string\n): HTMLElementTagNameMap[T] => {\n  const element = document.createElement(tagName);\n  if (className) {\n    element.className = className;\n  }\n  if (textContent) {\n    element.textContent = textContent;\n  }\n  return element;\n};\n\nexport const createElementWithHTML = <T extends keyof HTMLElementTagNameMap>(\n  tagName: T,\n  className: string,\n  innerHTML: string\n): HTMLElementTagNameMap[T] => {\n  const element = document.createElement(tagName);\n  element.className = className;\n  element.innerHTML = innerHTML;\n  return element;\n};","import type { ToastType } from '@/types/google-apis';\nimport { getDOMElement, createElementWithHTML } from '@/utils/dom';\n\nlet toastContainer: HTMLElement;\n\nexport const initializeToastContainer = (): void => {\n  toastContainer = getDOMElement('toastContainer');\n};\n\nconst TOAST_ICONS: Record<ToastType, string> = {\n  success: '‚úì',\n  error: '‚úï',\n  warning: '‚ö†',\n  info: 'i',\n};\n\nexport const showToast = (\n  title: string,\n  message: string,\n  type: ToastType = 'info',\n  duration = 5000\n): void => {\n  const toast = createElementWithHTML(\n    'div',\n    `toast ${type}`,\n    `\n    <div class=\"toast-icon\">${TOAST_ICONS[type] || 'i'}</div>\n    <div class=\"toast-content\">\n        <div class=\"toast-title\">${title}</div>\n        <div class=\"toast-message\">${message}</div>\n    </div>\n    <button class=\"toast-close\" aria-label=\"Close notification\">√ó</button>\n    <div class=\"toast-progress\" style=\"width: 100%;\"></div>\n    `\n  );\n\n  const closeBtn = toast.querySelector('.toast-close') as HTMLButtonElement;\n  const progressBar = toast.querySelector('.toast-progress') as HTMLDivElement;\n\n  closeBtn.addEventListener('click', () => removeToast(toast));\n\n  toastContainer.appendChild(toast);\n\n  // Animate in\n  requestAnimationFrame(() => {\n    toast.classList.add('show');\n  });\n\n  // Auto-remove after duration\n  if (duration > 0) {\n    progressBar.style.transition = `width ${duration}ms linear`;\n    progressBar.style.width = '0%';\n\n    setTimeout(() => {\n      removeToast(toast);\n    }, duration);\n  }\n\n  // Limit number of toasts\n  const toasts = toastContainer.querySelectorAll('.toast');\n  if (toasts.length > 5) {\n    removeToast(toasts[0] as HTMLElement);\n  }\n};\n\nconst removeToast = (toast: HTMLElement): void => {\n  toast.classList.remove('show');\n  setTimeout(() => {\n    if (toast.parentNode) {\n      toast.parentNode.removeChild(toast);\n    }\n  }, 300);\n};","/**\n * Hawks Coach Hub - Service Account Version (No Authentication Required)\n * Modern TypeScript implementation with backend API calls\n */\n\n/* eslint-disable no-console */\n\nimport type {\n  DriveFile,\n  DriveFolder,\n  StatusType,\n} from '@/types/google-apis';\nimport { getDOMElement } from '@/utils/dom';\nimport { AUTO_REFRESH_INTERVAL } from '@/utils/config';\nimport { initializeToastContainer, showToast } from '@/components/toast';\nimport { ServiceAccountDriveService } from '@/services/drive-service-account';\nimport { FileDisplayService } from '@/components/file-display';\nimport { SearchService } from '@/utils/search';\nimport { createElement } from '@/utils/dom';\n\n// Simplified Application State (no auth needed)\ninterface AppState {\n  allFiles: DriveFile[];\n  filteredFiles: DriveFile[];\n  allFolders: DriveFolder[];\n  folderCache: Map<string, DriveFolder>;\n  currentFolderFilter: string | null;\n  // Pagination\n  currentPage: number;\n  itemsPerPage: number;\n  totalPages: number;\n}\n\nconst state: AppState = {\n  allFiles: [],\n  filteredFiles: [],\n  allFolders: [],\n  folderCache: new Map(),\n  currentFolderFilter: null,\n  currentPage: 1,\n  itemsPerPage: 50,\n  totalPages: 0,\n};\n\n// Services\nconst driveService = new ServiceAccountDriveService();\nconst fileDisplayService = new FileDisplayService();\nconst searchService = new SearchService();\n\n// Session Planning State\nconst sessionPlanningState = {\n  isActive: false,\n  selectedFiles: new Set<string>(),\n  sessionName: '',\n};\n\n// Global FileActions for action buttons\ndeclare global {\n  interface Window {\n    FileActions: {\n      addToSession: (_fileId: string) => void;\n      downloadFile: (_url: string) => void;\n      togglePlanningMode: () => void;\n      exportSession: () => void;\n      removeFromSession: (_fileId: string) => void;\n    };\n  }\n}\n\nwindow.FileActions = {\n  addToSession: (fileId: string) => {\n    if (sessionPlanningState.isActive) {\n      sessionPlanningState.selectedFiles.add(fileId);\n      updateSessionDisplay();\n      showToast(\n        'Tiedosto lis√§tty',\n        'Materiaali lis√§tty harjoitussuunnitelmaan',\n        'success',\n        2000\n      );\n    } else {\n      // Auto-enable planning mode and add file\n      sessionPlanningState.isActive = true;\n      sessionPlanningState.selectedFiles.add(fileId);\n      updatePlanningModeUI();\n      updateSessionDisplay();\n      showToast(\n        'Harjoitussuunnittelu aloitettu',\n        'Ensimm√§inen materiaali lis√§tty',\n        'info',\n        3000\n      );\n    }\n  },\n\n  downloadFile: (url: string) => {\n    window.open(url, '_blank');\n  },\n\n  togglePlanningMode: () => {\n    sessionPlanningState.isActive = !sessionPlanningState.isActive;\n    if (!sessionPlanningState.isActive) {\n      sessionPlanningState.selectedFiles.clear();\n    }\n    updatePlanningModeUI();\n    updateSessionDisplay();\n  },\n\n  exportSession: () => {\n    if (sessionPlanningState.selectedFiles.size === 0) {\n      showToast(\n        'Ei materiaaleja',\n        'Lis√§√§ ensin materiaaleja harjoitukseen',\n        'warning',\n        3000\n      );\n      return;\n    }\n\n    const selectedFilesList = Array.from(sessionPlanningState.selectedFiles)\n      .map(fileId => state.allFiles.find(f => f.id === fileId))\n      .filter(Boolean)\n      .map(file => `‚Ä¢ ${file!.name}\\n  üîó ${file!.webViewLink}`)\n      .join('\\n\\n');\n\n    const sessionData = `HAWKS HARJOITUSSUUNNITELMA\nLuotu: ${new Date().toLocaleDateString('fi-FI')}\n\nMATERIAALIT (${sessionPlanningState.selectedFiles.size} kpl):\n${selectedFilesList}\n\n----\nLuotu Hawks Valmennuskeskuksessa\nüìÅ Kaikki materiaalit: https://drive.google.com/drive/folders/1ZF6AHx62MXfkgs7-xbrMxj4r9sdyKzUb`;\n\n    navigator.clipboard\n      .writeText(sessionData)\n      .then(() => {\n        showToast(\n          'Suunnitelma kopioitu',\n          'Harjoitussuunnitelma kopioitu leikep√∂yd√§lle',\n          'success',\n          3000\n        );\n      })\n      .catch(() => {\n        showToast(\n          'Virhe',\n          'Harjoitussuunnitelma kopioitu leikep√∂yd√§lle',\n          'error',\n          3000\n        );\n      });\n  },\n\n  removeFromSession: (fileId: string) => {\n    sessionPlanningState.selectedFiles.delete(fileId);\n    updateSessionDisplay();\n    showToast(\n      'Materiaali poistettu',\n      'Materiaali poistettu harjoitussuunnitelmasta',\n      'info',\n      2000\n    );\n  },\n};\n\n// DOM Elements\nconst searchInput = getDOMElement('searchInput') as HTMLInputElement;\nconst refreshButton = getDOMElement('refreshButton') as HTMLButtonElement;\nconst filesList = getDOMElement('allFilesList') as HTMLDivElement;\n\n/**\n * Update status display\n */\nfunction updateStatus(message: string, type: StatusType = 'info'): void {\n  console.log(`Status: ${message} (${type})`);\n  \n  const loadingStatus = document.getElementById('loadingStatus');\n  const loadingText = loadingStatus?.querySelector('.loading-text');\n  \n  if (loadingStatus && loadingText) {\n    if (type === 'loading') {\n      loadingText.textContent = message;\n      loadingStatus.style.display = 'flex';\n      console.log('‚úÖ Loading indicator SHOWN:', message);\n    } else {\n      loadingStatus.style.display = 'none';\n      console.log('‚úÖ Loading indicator HIDDEN');\n    }\n  } else {\n    console.log('‚ùå Loading status element not found');\n  }\n}\n\n/**\n * Show/hide loading skeleton\n */\nfunction showSkeletonLoading(): void {\n  const container = filesList;\n  container.innerHTML = `\n    <div class=\"skeleton-loading\">\n      <div class=\"skeleton-item\"></div>\n      <div class=\"skeleton-item\"></div>\n      <div class=\"skeleton-item\"></div>\n    </div>\n  `;\n}\n\nfunction hideSkeletonLoading(): void {\n  const skeletonElements = document.querySelectorAll('.skeleton-loading');\n  skeletonElements.forEach(el => el.remove());\n}\n\n/**\n * Load files and folders from service account backend\n */\nconst loadDriveFiles = async (refresh: boolean = false): Promise<void> => {\n  updateStatus('Yhdistet√§√§n Google Drive APIin...', 'loading');\n  showSkeletonLoading();\n\n  try {\n    const startTime = performance.now();\n    \n    // Show progress updates\n    updateStatus('Ladataan harjoitusmateriaaleja...', 'loading');\n    \n    // Add timeout to show that something is happening\n    const progressInterval = setInterval(() => {\n      const elapsed = Math.round((performance.now() - startTime) / 1000);\n      if (elapsed > 5) {\n        updateStatus(`Ladataan... ${elapsed}s (haetaan ${state.allFiles.length || 104} tiedostoa)`, 'loading');\n      }\n    }, 2000);\n    \n    // Load both files and folders in one API call\n    const data = await driveService.loadAllFilesAndFolders(refresh);\n    \n    clearInterval(progressInterval);\n    \n    const loadTime = performance.now() - startTime;\n    console.log(`‚ö° Loaded ${data.files.length} files, ${data.folders.length} folders in ${Math.round(loadTime)}ms ${data.cached ? '(cached)' : '(from Google Drive)'}`);\n\n    // Update state\n    state.allFiles = data.files;\n    state.allFolders = data.folders;\n    state.filteredFiles = [...data.files];\n\n    // Cache folder structure immediately for better UX\n    cacheFolderStructure();\n\n    // Remove debug logging to improve performance\n\n    hideSkeletonLoading();\n    updateStatus('', 'info'); // Hide loading status\n    displayFiles();\n    displayFolderChips();\n    updateFileCount();\n    updateSessionDisplay();\n\n    // Direct DOM update as fallback to ensure counts and chips are updated\n    setTimeout(() => {\n      console.log('üîß Direct DOM update fallback - checking elements');\n      \n      // Check and fix the status bar counts\n      const totalFilesSpan = document.getElementById('totalFiles');\n      const totalFoldersSpan = document.getElementById('totalFolders');\n      const currentViewSpan = document.getElementById('currentViewCount');\n      \n      console.log('üîç DOM elements found:', {\n        totalFiles: !!totalFilesSpan,\n        totalFolders: !!totalFoldersSpan, \n        currentView: !!currentViewSpan\n      });\n      \n      if (totalFilesSpan) {\n        totalFilesSpan.textContent = state.allFiles.length.toString();\n        console.log(`‚úÖ Set totalFiles to: ${state.allFiles.length}`);\n      }\n      if (totalFoldersSpan) {\n        totalFoldersSpan.textContent = state.allFolders.length.toString();\n        console.log(`‚úÖ Set totalFolders to: ${state.allFolders.length}`);\n      }\n      if (currentViewSpan) {\n        currentViewSpan.textContent = state.filteredFiles.length.toString();\n        console.log(`‚úÖ Set currentView to: ${state.filteredFiles.length}`);\n      }\n      \n      // Also try to force the updateFileCount function\n      updateFileCount();\n      \n      console.log(`üîß Direct update completed: ${state.allFiles.length} files, ${state.allFolders.length} folders`);\n    }, 1000);\n\n    if (data.files.length === 0 && data.folders.length === 0) {\n      updateStatus('No training materials found', 'info');\n      showToast(\n        'No Content Found',\n        'No training resources found in the Hawks folder',\n        'info'\n      );\n    } else {\n      updateStatus(\n        `Successfully loaded ${data.files.length} files and ${data.folders.length} folders`,\n        'success'\n      );\n      showToast(\n        'Hawks Training Materials Loaded',\n        `Found ${data.files.length} files and ${data.folders.length} folders`,\n        'success'\n      );\n    }\n  } catch (error) {\n    console.error('Error loading files:', error);\n    hideSkeletonLoading();\n    \n    const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n    updateStatus(`Error loading files: ${errorMessage}`, 'error');\n    showToast(\n      'Loading Error',\n      'Failed to load training materials. Please try refreshing the page.',\n      'error'\n    );\n  }\n};\n\n/**\n * Calculate hierarchy level for a folder (0 = top level under Hawks root)\n */\nfunction calculateFolderLevel(folderId: string, allFolders: DriveFolder[]): number {\n  const HAWKS_FOLDER_ID = '1ZF6AHx62MXfkgs7-xbrMxj4r9sdyKzUb';\n  \n  if (folderId === HAWKS_FOLDER_ID) return -1; // Root folder itself\n  \n  const folder = allFolders.find(f => f.id === folderId);\n  if (!folder || !folder.parents || folder.parents.length === 0) return 999; // Unknown/orphaned\n  \n  const parentId = folder.parents[0];\n  if (!parentId) return 999; // No parent ID\n  if (parentId === HAWKS_FOLDER_ID) return 0; // Direct child of Hawks root\n  \n  // Recursively calculate parent level + 1\n  return calculateFolderLevel(parentId, allFolders) + 1;\n}\n\n/**\n * Cache folder structure for quick lookups\n */\nfunction cacheFolderStructure(): void {\n  console.log('üóÇÔ∏è Caching folder structure:', state.allFolders.length, 'folders,', state.allFiles.length, 'files');\n  state.folderCache.clear();\n  \n  let foldersWithFiles = 0;\n  state.allFolders.forEach((folder) => {\n    // Simple file counting: files that have this folder as parent  \n    const directFiles = state.allFiles.filter(file => \n      file.parents && file.parents.includes(folder.id)\n    );\n    \n    // Calculate hierarchy level\n    const hierarchyLevel = calculateFolderLevel(folder.id, state.allFolders);\n    \n    // Create extended folder object with file count and hierarchy level\n    const extendedFolder = {\n      ...folder,\n      fileCount: directFiles.length,\n      hierarchyLevel: hierarchyLevel\n    };\n    \n    state.folderCache.set(folder.id, extendedFolder);\n    \n    if (directFiles.length > 0) {\n      foldersWithFiles++;\n    }\n  });\n\n  console.log(`‚úÖ Cached ${state.allFolders.length} folders, ${foldersWithFiles} have files`);\n}\n\n/**\n * Display files in the UI\n */\nfunction displayFiles(): void {\n  filesList.innerHTML = '';\n\n  if (state.filteredFiles.length === 0) {\n    const isSearching = searchInput.value.trim() !== '';\n    const emptyState = fileDisplayService.createEmptyState(\n      isSearching,\n      state.allFiles.length > 0\n    );\n    filesList.appendChild(emptyState);\n    updatePagination();\n    return;\n  }\n\n  // Get current page items\n  const startIndex = (state.currentPage - 1) * state.itemsPerPage;\n  const endIndex = startIndex + state.itemsPerPage;\n  const pageItems = state.filteredFiles.slice(startIndex, endIndex);\n\n  pageItems.forEach(file => {\n    const fileItem = fileDisplayService.createFileItem(file);\n    filesList.appendChild(fileItem);\n  });\n\n  updatePagination();\n}\n\n/**\n * Display folder chips\n */\nfunction displayFolderChips(): void {\n  const folderChipsBar = document.getElementById('folderChipsBar');\n  const folderChips = document.getElementById('folderChips');\n  \n  if (!folderChipsBar || !folderChips) return;\n\n  if (state.allFolders.length === 0) {\n    folderChipsBar.style.display = 'none';\n    return;\n  }\n\n  folderChipsBar.style.display = 'block';\n  \n  // Clear existing chips\n  folderChips.innerHTML = '';\n  \n  // Create \"All Files\" chip\n  const allFilesChip = document.createElement('button');\n  allFilesChip.className = `folder-chip ${state.currentFolderFilter === null ? 'active' : ''}`;\n  allFilesChip.setAttribute('data-folder-id', '');\n  allFilesChip.innerHTML = `\n    <span class=\"folder-chip-icon\">üìÅ</span>\n    <span>Kaikki tiedostot</span>\n    <span class=\"folder-chip-count\">${state.allFiles.length}</span>\n  `;\n  allFilesChip.onclick = () => filterByFolder(null);\n  folderChips.appendChild(allFilesChip);\n  \n  // Create real folder chips from cached folders\n  \n  // Get folders with files and prioritize meaningful folder names for coaches\n  const allFoldersWithFiles = Array.from(state.folderCache.values())\n    .filter(folder => folder.fileCount && folder.fileCount > 0);\n  \n  // Prioritize folders with coaching-related terms (Finnish and English)\n  const priorityTerms = [\n    'harjoitus', 'practice', 'drill', 'exercise', 'treeni', \n    'suunnittelu', 'planning', 'plan', 'opetus', 'teaching',\n    'taito', 'skill', 'tekniikka', 'technique', 'taktii', 'tactic'\n  ];\n  \n  const prioritizedFolders = allFoldersWithFiles.sort((a, b) => {\n    // 1. First priority: hierarchy level (top-level folders first)\n    const aLevel = (a as any).hierarchyLevel || 999;\n    const bLevel = (b as any).hierarchyLevel || 999;\n    if (aLevel !== bLevel) {\n      return aLevel - bLevel; // Lower level = higher priority\n    }\n    \n    // 2. Second priority: Check if folder name contains coaching terms\n    const aHasPriority = priorityTerms.some(term => \n      a.name.toLowerCase().includes(term.toLowerCase())\n    );\n    const bHasPriority = priorityTerms.some(term => \n      b.name.toLowerCase().includes(term.toLowerCase())\n    );\n    \n    // If one has priority and other doesn't, prioritize the one with priority terms\n    if (aHasPriority && !bHasPriority) return -1;\n    if (!aHasPriority && bHasPriority) return 1;\n    \n    // 3. Third priority: sort by file count (more files = higher priority)\n    return (b.fileCount || 0) - (a.fileCount || 0);\n  });\n  \n  const foldersWithFiles = prioritizedFolders.slice(0, 8); // Show top 8 prioritized folders\n  \n  console.log(`üèí Displaying ${foldersWithFiles.length} folder chips`);\n  \n  foldersWithFiles.forEach(folder => {\n    const chip = document.createElement('button');\n    chip.className = `folder-chip ${state.currentFolderFilter === folder.id ? 'active' : ''}`;\n    chip.setAttribute('data-folder-id', folder.id);\n    chip.innerHTML = `\n      <span class=\"folder-chip-icon\">üìÇ</span>\n      <span>${folder.name}</span>\n      <span class=\"folder-chip-count\">${folder.fileCount}</span>\n    `;\n    chip.onclick = () => filterByFolder(folder.id);\n    folderChips.appendChild(chip);\n  });\n}\n\n/**\n * Filter files by folder\n */\nfunction filterByFolder(folderId: string | null): void {\n  state.currentFolderFilter = folderId;\n  state.currentPage = 1;\n\n  if (!folderId) {\n    // Show all files\n    state.filteredFiles = [...state.allFiles];\n    updateStatus(`N√§ytet√§√§n kaikki tiedostot (${state.allFiles.length} tiedostoa)`, 'info');\n  } else {\n    // Show files in specific folder and its subfolders\n    console.log(`üîç Filtering by folder ${folderId}`);\n    console.log(`üìä Available: ${state.allFiles.length} files, ${state.allFolders.length} folders`);\n    \n    const filesInFolder = driveService.getFilesInFolder(folderId, state.allFiles, state.allFolders);\n    state.filteredFiles = filesInFolder;\n    \n    console.log(`üìÑ Found ${filesInFolder.length} files in folder`);\n    if (filesInFolder.length > 0) {\n      console.log(`üìù Sample files:`, filesInFolder.slice(0, 3).map(f => f.name));\n    }\n    \n    const folder = state.folderCache.get(folderId);\n    const folderName = folder?.name || 'Unknown Folder';\n    console.log(`üìÅ Folder name: ${folderName}`);\n    \n    updateStatus(\n      `N√§ytet√§√§n kansio: ${folderName} ja alikansiot (${filesInFolder.length} tiedostoa)`,\n      'info'\n    );\n  }\n\n  displayFiles();\n  displayFolderChips();\n  updateFileCount();\n  updateSessionDisplay();\n}\n\n/**\n * Handle search functionality\n */\nfunction handleSearch(): void {\n  const query = searchInput.value.trim().toLowerCase();\n  \n  if (!query) {\n    filterByFolder(state.currentFolderFilter);\n    return;\n  }\n\n  const baseFiles = state.currentFolderFilter \n    ? driveService.getFilesInFolder(state.currentFolderFilter, state.allFiles, state.allFolders)\n    : state.allFiles;\n  \n  state.filteredFiles = searchService.filterFilesBySearch(baseFiles, query);\n  state.currentPage = 1;\n  \n  updateStatus(`Hakutulokset: ${state.filteredFiles.length} tiedostoa l√∂ytyi`, 'info');\n  displayFiles();\n  updateFileCount();\n  updateSessionDisplay();\n}\n\n/**\n * Update file count display\n */\nfunction updateFileCount(): void {\n  const totalFilesSpan = document.getElementById('totalFiles');\n  const totalFoldersSpan = document.getElementById('totalFolders');\n  const currentViewSpan = document.getElementById('currentViewCount');\n  const fileCountSpan = document.getElementById('fileCount');\n\n  if (totalFilesSpan) {\n    totalFilesSpan.textContent = state.allFiles.length.toString();\n  }\n  \n  if (totalFoldersSpan) {\n    totalFoldersSpan.textContent = state.allFolders.length.toString();\n  }\n  \n  if (currentViewSpan) {\n    currentViewSpan.textContent = state.filteredFiles.length.toString();\n  }\n  \n  if (fileCountSpan) {\n    const message = state.filteredFiles.length === 1 \n      ? '1 tiedosto l√∂ytyi' \n      : `${state.filteredFiles.length} tiedostoa l√∂ytyi`;\n    fileCountSpan.textContent = message;\n  }\n}\n\n/**\n * Update pagination\n */\nfunction updatePagination(): void {\n  state.totalPages = Math.ceil(state.filteredFiles.length / state.itemsPerPage);\n  \n  const paginationInfo = document.getElementById('paginationInfo');\n  const paginationControls = document.getElementById('paginationControls');\n  \n  if (!paginationInfo || !paginationControls) return;\n\n  if (state.totalPages <= 1) {\n    paginationControls.style.display = 'none';\n    paginationInfo.textContent = '';\n    return;\n  }\n\n  paginationControls.style.display = 'flex';\n  \n  const startItem = (state.currentPage - 1) * state.itemsPerPage + 1;\n  const endItem = Math.min(state.currentPage * state.itemsPerPage, state.filteredFiles.length);\n  \n  paginationInfo.textContent = `${startItem}-${endItem} / ${state.filteredFiles.length}`;\n\n  // Update pagination buttons\n  const prevButton = document.getElementById('prevPage') as HTMLButtonElement;\n  const nextButton = document.getElementById('nextPage') as HTMLButtonElement;\n  \n  if (prevButton) {\n    prevButton.disabled = state.currentPage === 1;\n    prevButton.onclick = () => {\n      if (state.currentPage > 1) {\n        state.currentPage--;\n        displayFiles();\n      }\n    };\n  }\n  \n  if (nextButton) {\n    nextButton.disabled = state.currentPage === state.totalPages;\n    nextButton.onclick = () => {\n      if (state.currentPage < state.totalPages) {\n        state.currentPage++;\n        displayFiles();\n      }\n    };\n  }\n}\n\n/**\n * Update planning mode UI\n */\nconst updatePlanningModeUI = (): void => {\n  const planningBar = document.getElementById('session-planning-bar');\n  if (!planningBar) return;\n\n  planningBar.style.display = sessionPlanningState.isActive ? 'flex' : 'none';\n\n  // Update planning mode toggle button if it exists\n  const toggleBtn = document.querySelector('.planning-toggle-btn');\n  if (toggleBtn) {\n    toggleBtn.textContent = sessionPlanningState.isActive\n      ? 'Lopeta suunnittelu'\n      : 'Aloita harjoitussuunnittelu';\n    toggleBtn.classList.toggle('active', sessionPlanningState.isActive);\n  }\n\n  // Add visual indicators to file items\n  document.querySelectorAll('.file-item').forEach(item => {\n    item.classList.toggle('planning-mode', sessionPlanningState.isActive);\n  });\n};\n\n/**\n * Update session display\n */\nconst updateSessionDisplay = (): void => {\n  const sessionCount = document.getElementById('session-count');\n  const sessionList = document.getElementById('session-materials-list');\n\n  if (sessionCount) {\n    sessionCount.textContent =\n      sessionPlanningState.selectedFiles.size.toString();\n  }\n\n  if (sessionList) {\n    sessionList.innerHTML = '';\n\n    if (sessionPlanningState.selectedFiles.size === 0) {\n      sessionList.innerHTML =\n        '<div class=\"session-empty\">Ei materiaaleja valittuna</div>';\n    } else {\n      Array.from(sessionPlanningState.selectedFiles).forEach(fileId => {\n        const file = state.allFiles.find(f => f.id === fileId);\n        if (file) {\n          const item = createElement('div', 'session-material-item');\n          item.innerHTML = `\n            <span class=\"material-name\">${file.name}</span>\n            <button class=\"remove-material-btn\" onclick=\"window.FileActions.removeFromSession('${fileId}')\" title=\"Poista\">√ó</button>\n          `;\n          sessionList.appendChild(item);\n        }\n      });\n    }\n  }\n\n  // Update add buttons in file list\n  document.querySelectorAll('.file-item').forEach(item => {\n    const addBtn = item.querySelector('.add-to-session-btn');\n    if (addBtn) {\n      const fileId = addBtn.getAttribute('data-file-id');\n      const isSelected =\n        fileId && sessionPlanningState.selectedFiles.has(fileId);\n      item.classList.toggle('in-session', !!isSelected);\n      if (addBtn) {\n        addBtn.textContent = isSelected ? '‚úì Lis√§tty' : '+ Harjoitus';\n        addBtn.classList.toggle('added', !!isSelected);\n      }\n    }\n  });\n};\n\n/**\n * Initialize event listeners\n */\nfunction initializeEventListeners(): void {\n  // Search functionality\n  searchInput.addEventListener('input', handleSearch);\n  \n  // Refresh button - force refresh with bypass cache\n  refreshButton.addEventListener('click', () => loadDriveFiles(true));\n\n  // Auto-refresh (optional)\n  if (AUTO_REFRESH_INTERVAL > 0) {\n    setInterval(loadDriveFiles, AUTO_REFRESH_INTERVAL);\n  }\n\n  console.log('Event listeners initialized');\n}\n\n/**\n * Initialize the application\n */\nasync function initializeApp(): Promise<void> {\n  console.log('üèí Hawks Coach Hub - Service Account Version initializing...');\n  \n  // Initialize toast notifications\n  initializeToastContainer();\n  \n  // Initialize event listeners\n  initializeEventListeners();\n  \n  // Remove auth-related UI elements\n  const authElements = document.querySelectorAll('#authorize_div, #signout_div');\n  authElements.forEach(el => {\n    if (el instanceof HTMLElement) {\n      el.style.display = 'none';\n    }\n  });\n  \n  // Load files immediately (no auth required)\n  await loadDriveFiles();\n  \n  console.log('‚úÖ Hawks Coach Hub initialized successfully');\n}\n\n// Start the application\ndocument.addEventListener('DOMContentLoaded', initializeApp);","/**\n * Service Account Drive API Service\n * Calls backend API instead of direct Google Drive API\n */\n\n/* eslint-disable no-console */\n\nimport type { DriveFile, DriveFolder } from '@/types/google-apis';\n\nexport class ServiceAccountDriveService {\n  private readonly API_BASE = this.getApiBase();\n\n  private getApiBase(): string {\n    // In development, the API might not be available\n    // For now, try to detect if we're in dev mode\n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n      // Development mode - API might not be available\n      return '/api/drive';\n    }\n    return '/api/drive';\n  }\n\n  /**\n   * Load all files and folders from Hawks folder via service account\n   */\n  async loadAllFilesAndFolders(refresh: boolean = false): Promise<{ files: DriveFile[], folders: DriveFolder[], cached?: boolean }> {\n    try {\n      console.log('üì° Fetching data from service account API...');\n      \n      const url = `${this.API_BASE}?type=both${refresh ? '&refresh=true' : ''}`;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).catch(error => {\n        console.error('‚ùå Fetch error:', error);\n        throw error;\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        console.error('‚ùå API Response:', response.status, response.statusText);\n        console.error('‚ùå Error details:', errorText);\n        \n        if (response.status === 404) {\n          throw new Error(`Service account API not available. Make sure the backend is deployed or running locally.`);\n        }\n        \n        throw new Error(`API request failed: ${response.status} ${response.statusText}\\n${errorText}`);\n      }\n      \n      const data = await response.json();\n      \n      console.log(`üìä Loaded ${data.files?.length || 0} files, ${data.folders?.length || 0} folders ${data.cached ? '(cached)' : '(fresh from Google Drive)'}`);\n      \n      return {\n        files: data.files || [],\n        folders: data.folders || [],\n        cached: data.cached || false\n      };\n      \n    } catch (error) {\n      console.error('‚ùå Service account API error:', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      if (errorMessage.includes('Failed to fetch') || errorMessage.includes('NetworkError')) {\n        throw new Error('Unable to connect to service account API. The backend API is not running.');\n      }\n      \n      throw new Error(`Failed to load Drive content: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Load only files from Hawks folder\n   */\n  async loadAllFiles(): Promise<DriveFile[]> {\n    try {\n      console.log('üîç Loading files via service account...');\n      \n      const response = await fetch(`${this.API_BASE}?type=files`);\n      \n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log(`üìÑ Service account loaded: ${data.files.length} files`);\n      \n      return data.files || [];\n      \n    } catch (error) {\n      console.error('‚ùå Service account files error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load only folders from Hawks folder\n   */\n  async loadAllFolders(): Promise<DriveFolder[]> {\n    try {\n      console.log('üìÇ Loading folders via service account...');\n      \n      const response = await fetch(`${this.API_BASE}?type=folders`);\n      \n      if (!response.ok) {\n        throw new Error(`API request failed: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log(`üìÅ Service account loaded: ${data.folders.length} folders`);\n      \n      return data.folders || [];\n      \n    } catch (error) {\n      console.error('‚ùå Service account folders error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get files within a specific folder (including subfolders)\n   */\n  getFilesInFolder(folderId: string, allFiles: DriveFile[], allFolders: DriveFolder[]): DriveFile[] {\n    // Get files directly in this folder\n    const directFiles = allFiles.filter(file => \n      file.parents && file.parents.includes(folderId)\n    );\n    \n    // Get all subfolder IDs recursively\n    const subfolderIds = this.getSubfolderIds(folderId, allFolders);\n    \n    // Get files from all subfolders\n    const subfolderFiles = allFiles.filter(file =>\n      file.parents && file.parents.some(parentId => subfolderIds.includes(parentId))\n    );\n    \n    // Combine and deduplicate\n    const allFolderFiles = [...directFiles, ...subfolderFiles];\n    return allFolderFiles.filter((file, index, array) =>\n      array.findIndex(f => f.id === file.id) === index\n    );\n  }\n\n  /**\n   * Get all subfolder IDs recursively\n   */\n  private getSubfolderIds(folderId: string, allFolders: DriveFolder[]): string[] {\n    const subfolderIds: string[] = [];\n    \n    const directSubfolders = allFolders.filter(folder =>\n      folder.parents && folder.parents.includes(folderId)\n    );\n    \n    directSubfolders.forEach(subfolder => {\n      subfolderIds.push(subfolder.id);\n      // Recursively get subfolders\n      const nestedSubfolders = this.getSubfolderIds(subfolder.id, allFolders);\n      subfolderIds.push(...nestedSubfolders);\n    });\n    \n    return subfolderIds;\n  }\n}","/**\n * File Display Components\n */\n\nimport type {\n  DriveFile,\n  FileCategory,\n  CategoryName,\n} from '@/types/google-apis';\nimport { createElement } from '@/utils/dom';\n\nexport class FileDisplayService {\n  /**\n   * Get appropriate icon for file type\n   */\n  getFileIcon(mimeType: string): string {\n    const iconClass = this.getFileIconClass(mimeType);\n    return `<div class=\"file-type-icon ${iconClass}\"></div>`;\n  }\n\n  /**\n   * Get CSS class for file type icon\n   */\n  private getFileIconClass(mimeType: string): string {\n    if (mimeType.includes('pdf')) return 'icon-pdf';\n    if (mimeType.includes('document')) return 'icon-document';\n    if (mimeType.includes('spreadsheet')) return 'icon-spreadsheet';\n    if (mimeType.includes('presentation')) return 'icon-presentation';\n    if (mimeType.includes('video')) return 'icon-video';\n    if (mimeType.includes('image')) return 'icon-image';\n    if (mimeType.includes('folder')) return 'icon-folder';\n    if (mimeType.includes('text')) return 'icon-text';\n    return 'icon-file';\n  }\n\n  /**\n   * Detect content type for coaching context\n   */\n  private detectContentType(fileName: string): string {\n    const name = fileName.toLowerCase();\n\n    // Coaching-specific content detection\n    if (\n      name.includes('drill') ||\n      name.includes('harjoitus') ||\n      name.includes('exercise')\n    ) {\n      return 'drill';\n    }\n    if (\n      name.includes('tactic') ||\n      name.includes('taktiikka') ||\n      name.includes('strategy')\n    ) {\n      return 'tactic';\n    }\n    if (\n      name.includes('plan') ||\n      name.includes('ohjelma') ||\n      name.includes('session') ||\n      name.includes('practice')\n    ) {\n      return 'plan';\n    }\n    if (\n      name.includes('video') ||\n      name.includes('demo') ||\n      name.includes('example')\n    ) {\n      return 'video';\n    }\n\n    return 'general';\n  }\n\n  /**\n   * Check if file was recently accessed (mock implementation)\n   */\n  private isRecentlyAccessed(file: DriveFile): boolean {\n    // Mock logic - in real implementation would check localStorage or usage analytics\n    const recentFiles = JSON.parse(localStorage.getItem('recentFiles') || '[]');\n    return recentFiles.includes(file.id);\n  }\n\n  /**\n   * Get localized content type label\n   */\n  private getContentTypeLabel(contentType: string): string {\n    const labels: Record<string, string> = {\n      drill: 'Harjoitus',\n      tactic: 'Taktiikka',\n      plan: 'Suunnitelma',\n      video: 'Video',\n      general: 'Materiaali',\n    };\n    return labels[contentType] || 'Materiaali';\n  }\n\n  /**\n   * Create action buttons for file\n   */\n  private createActionButtons(file: DriveFile): string {\n    return `\n      <div class=\"file-actions\">\n        <button class=\"action-btn\" onclick=\"window.open('${file.webViewLink}', '_blank')\" title=\"Avaa Google Drivessa\">\n          Avaa\n        </button>\n        <button class=\"action-btn secondary\" onclick=\"FileActions.addToSession('${file.id}')\" title=\"Lis√§√§ harjoitukseen\">\n          + Harjoitus\n        </button>\n        <button class=\"action-btn secondary\" onclick=\"FileActions.downloadFile('${file.webViewLink}')\" title=\"Lataa\">\n          ‚¨á\n        </button>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a file item element with enhanced UX\n   */\n  createFileItem(file: DriveFile): HTMLElement {\n    const fileItem = createElement('div', 'file-item');\n\n    const contentType = this.detectContentType(file.name);\n    const isRecent = this.isRecentlyAccessed(file);\n    const icon = this.getFileIcon(file.mimeType);\n    const modifiedDate = new Date(file.modifiedTime).toLocaleDateString(\n      'fi-FI'\n    );\n    const actionButtons = this.createActionButtons(file);\n\n    // Add data attributes for styling\n    fileItem.setAttribute('data-type', contentType);\n    if (isRecent) {\n      fileItem.classList.add('recently-accessed');\n    }\n\n    fileItem.innerHTML = `\n      <div class=\"file-icon\">${icon}</div>\n      <div class=\"file-info\">\n        <a href=\"${file.webViewLink}\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"file-name\">\n          ${file.name}\n        </a>\n        <div class=\"file-meta\">\n          <span class=\"file-date\">Muokattu: ${modifiedDate}</span>\n          <span class=\"content-type-badge\">${this.getContentTypeLabel(contentType)}</span>\n        </div>\n      </div>\n      ${actionButtons}\n    `;\n\n    return fileItem;\n  }\n\n  /**\n   * Create skeleton loading item\n   */\n  createSkeletonItem(): HTMLElement {\n    const skeleton = createElement('div', 'file-item skeleton-item');\n    skeleton.innerHTML = `\n      <div class=\"file-icon skeleton-circle\"></div>\n      <div class=\"file-info\">\n        <div class=\"skeleton-text skeleton-title\"></div>\n        <div class=\"skeleton-text skeleton-date\"></div>\n      </div>\n    `;\n    return skeleton;\n  }\n\n  /**\n   * Create skeleton category section\n   */\n  createCategorySkeleton(): HTMLElement {\n    const skeleton = createElement('div', 'category skeleton-category');\n    skeleton.innerHTML = `\n      <div class=\"skeleton-text skeleton-category-title\"></div>\n      <div class=\"skeleton-text skeleton-category-item\"></div>\n      <div class=\"skeleton-text skeleton-category-item\"></div>\n      <div class=\"skeleton-text skeleton-category-item\"></div>\n    `;\n    return skeleton;\n  }\n\n  /**\n   * Create empty state element\n   */\n  createEmptyState(isSearching: boolean, hasFiles: boolean): HTMLElement {\n    const emptyDiv = createElement('div', 'empty-state');\n\n    if (isSearching) {\n      emptyDiv.innerHTML = `\n        <div class=\"empty-icon\">üîç</div>\n        <h3>No training resources found</h3>\n        <p>Try adjusting your search terms or browse by category instead.</p>\n        <button class=\"empty-action\" onclick=\"searchInput.value=''; handleSearch();\">\n          Clear Search\n        </button>\n      `;\n    } else if (!hasFiles) {\n      emptyDiv.innerHTML = `\n        <div class=\"empty-icon\">üìÅ</div>\n        <h3>Welcome to Hawks Coach Hub</h3>\n        <p>Sign in with Google Drive to access your training resources, drills, and tactical materials.</p>\n        <div class=\"empty-steps\">\n          <div class=\"step\">\n            <span class=\"step-number\">1</span>\n            <span>Click \"Sign In\" above</span>\n          </div>\n          <div class=\"step\">\n            <span class=\"step-number\">2</span>\n            <span>Authorize Google Drive access</span>\n          </div>\n          <div class=\"step\">\n            <span class=\"step-number\">3</span>\n            <span>Start browsing your files</span>\n          </div>\n        </div>\n      `;\n    } else {\n      emptyDiv.innerHTML = `\n        <div class=\"empty-icon\">üìã</div>\n        <h3>No files in this category</h3>\n        <p>This category is currently empty. Files will appear here when they match the category criteria.</p>\n      `;\n    }\n\n    return emptyDiv;\n  }\n\n  /**\n   * Group files by category\n   */\n  groupFilesByCategory(files: DriveFile[]): FileCategory {\n    const categories: FileCategory = {\n      'Floorball Drills': [],\n      'Tactics & Strategy': [],\n      'Training Plans': [],\n      'Video Resources': [],\n      'Diagrams & Images': [],\n      Documents: [],\n      Other: [],\n    };\n\n    files.forEach(file => {\n      const name = file.name.toLowerCase();\n      const mimeType = file.mimeType;\n\n      // Floorball-specific categorization\n      if (\n        name.includes('drill') ||\n        name.includes('exercise') ||\n        name.includes('training') ||\n        name.includes('floorball')\n      ) {\n        categories['Floorball Drills'].push(file);\n      } else if (\n        name.includes('tactic') ||\n        name.includes('strategy') ||\n        name.includes('formation')\n      ) {\n        categories['Tactics & Strategy'].push(file);\n      } else if (\n        name.includes('plan') ||\n        name.includes('program') ||\n        name.includes('schedule') ||\n        name.includes('season')\n      ) {\n        categories['Training Plans'].push(file);\n      } else if (\n        mimeType.includes('video') ||\n        name.includes('.mp4') ||\n        name.includes('.mov')\n      ) {\n        categories['Video Resources'].push(file);\n      } else if (\n        mimeType.includes('image') ||\n        name.includes('.jpg') ||\n        name.includes('.png')\n      ) {\n        categories['Diagrams & Images'].push(file);\n      } else if (\n        mimeType.includes('document') ||\n        mimeType.includes('pdf') ||\n        mimeType.includes('text')\n      ) {\n        categories['Documents'].push(file);\n      } else {\n        categories['Other'].push(file);\n      }\n    });\n\n    return categories;\n  }\n\n  /**\n   * Create a category section\n   */\n  createCategorySection(\n    categoryName: CategoryName,\n    files: DriveFile[]\n  ): HTMLElement {\n    const categoryDiv = createElement('div', 'category');\n\n    const categoryHeader = createElement('h3');\n    categoryHeader.textContent = `${categoryName} (${files.length})`;\n    categoryDiv.appendChild(categoryHeader);\n\n    const fileList = createElement('div', 'file-list');\n\n    files.forEach(file => {\n      const fileItem = this.createFileItem(file);\n      fileList.appendChild(fileItem);\n    });\n\n    categoryDiv.appendChild(fileList);\n    return categoryDiv;\n  }\n}\n","/**\n * Search and filtering utilities\n */\n\nimport type { DriveFile, DriveFolder } from '@/types/google-apis';\n\nexport class SearchService {\n  /**\n   * Filter files by search term\n   */\n  filterFilesBySearch(files: DriveFile[], searchTerm: string): DriveFile[] {\n    if (!searchTerm.trim()) {\n      return files;\n    }\n\n    const term = searchTerm.toLowerCase().trim();\n    return files.filter(file => file.name.toLowerCase().includes(term));\n  }\n\n  /**\n   * Filter files by folder\n   */\n  filterFilesByFolder(\n    files: DriveFile[],\n    folderId: string | null,\n    folderCache: Map<string, DriveFolder>\n  ): DriveFile[] {\n    if (!folderId) {\n      return files;\n    }\n\n    const folderData = folderCache.get(folderId);\n    return folderData ? folderData.files || [] : [];\n  }\n\n  /**\n   * Combined search and folder filtering\n   */\n  filterFiles(\n    allFiles: DriveFile[],\n    searchTerm: string,\n    folderId: string | null,\n    folderCache: Map<string, DriveFolder>\n  ): DriveFile[] {\n    let baseFiles = allFiles;\n\n    // First apply folder filter if active\n    if (folderId) {\n      baseFiles = this.filterFilesByFolder(allFiles, folderId, folderCache);\n    }\n\n    // Then apply search filter\n    return this.filterFilesBySearch(baseFiles, searchTerm);\n  }\n\n  /**\n   * Debounce function for search input\n   */\n  // eslint-disable-next-line no-unused-vars\n  debounce<T extends (...args: any[]) => void>(func: T, wait: number): T {\n    let timeout: NodeJS.Timeout;\n    return ((...args: any[]) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(null, args), wait);\n    }) as T;\n  }\n}\n","/**\n * Application configuration\n */\n\nexport const CLIENT_ID = window.GOOGLE_CLIENT_ID || 'YOUR_GOOGLE_CLIENT_ID_HERE';\nexport const API_KEY = window.GOOGLE_API_KEY || 'YOUR_GOOGLE_API_KEY_HERE';\nexport const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';\nexport const SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly';\n\nexport const AUTO_REFRESH_INTERVAL = 15 * 60 * 1000; // 15 minutes\nexport const API_LOADING_TIMEOUT = 60; // 60 attempts (30 seconds)\nexport const API_LOADING_INTERVAL = 500; // 500ms\n\nexport const PAGINATION_SIZE = 1000;\n\nexport const isCredentialsConfigured = (): boolean => {\n  return CLIENT_ID !== 'YOUR_GOOGLE_CLIENT_ID_HERE' && API_KEY !== 'YOUR_GOOGLE_API_KEY_HERE';\n};\n\nexport const validateAPIKey = (apiKey: string): boolean => {\n  return Boolean(apiKey && apiKey.length >= 30 && apiKey.startsWith('AIza'));\n};"],"names":["getDOMElement","id","element","document","getElementById","Error","createElement","tagName","className","textContent","toastContainer","TOAST_ICONS","success","error","warning","info","showToast","title","message","type","duration","toast","innerHTML","createElementWithHTML","closeBtn","querySelector","progressBar","addEventListener","removeToast","appendChild","requestAnimationFrame","classList","add","style","transition","width","setTimeout","toasts","querySelectorAll","length","remove","parentNode","removeChild","state","allFiles","filteredFiles","allFolders","folderCache","Map","currentFolderFilter","currentPage","itemsPerPage","totalPages","driveService","constructor","this","API_BASE","getApiBase","window","location","hostname","loadAllFilesAndFolders","refresh","console","log","url","response","fetch","method","headers","Accept","catch","ok","errorText","text","status","statusText","data","json","files","folders","cached","errorMessage","includes","loadAllFiles","loadAllFolders","getFilesInFolder","folderId","directFiles","filter","file","parents","subfolderIds","getSubfolderIds","some","parentId","index","array","findIndex","f","folder","forEach","subfolder","push","nestedSubfolders","fileDisplayService","getFileIcon","mimeType","getFileIconClass","detectContentType","fileName","name","toLowerCase","isRecentlyAccessed","JSON","parse","localStorage","getItem","getContentTypeLabel","contentType","drill","tactic","plan","video","general","createActionButtons","webViewLink","createFileItem","fileItem","isRecent","icon","modifiedDate","Date","modifiedTime","toLocaleDateString","actionButtons","setAttribute","createSkeletonItem","skeleton","createCategorySkeleton","createEmptyState","isSearching","hasFiles","emptyDiv","groupFilesByCategory","categories","Documents","Other","createCategorySection","categoryName","categoryDiv","categoryHeader","fileList","searchService","filterFilesBySearch","searchTerm","trim","term","filterFilesByFolder","folderData","get","filterFiles","baseFiles","debounce","func","wait","timeout","args","clearTimeout","apply","sessionPlanningState","isActive","selectedFiles","Set","sessionName","FileActions","addToSession","fileId","downloadFile","open","togglePlanningMode","clear","exportSession","size","selectedFilesList","Array","from","map","find","Boolean","join","sessionData","navigator","clipboard","writeText","then","removeFromSession","delete","searchInput","refreshButton","filesList","updateStatus","loadingStatus","loadingText","display","hideSkeletonLoading","el","loadDriveFiles","async","startTime","performance","now","progressInterval","setInterval","elapsed","Math","round","clearInterval","loadTime","foldersWithFiles","hierarchyLevel","calculateFolderLevel","extendedFolder","fileCount","set","totalFilesSpan","totalFoldersSpan","currentViewSpan","totalFiles","totalFolders","currentView","toString","HAWKS_FOLDER_ID","displayFiles","value","emptyState","startIndex","endIndex","slice","displayFolderChips","folderChipsBar","folderChips","allFilesChip","onclick","filterByFolder","allFoldersWithFiles","values","priorityTerms","sort","a","b","aLevel","bLevel","aHasPriority","bHasPriority","chip","filesInFolder","folderName","handleSearch","query","updateFileCount","fileCountSpan","updatePagination","ceil","paginationInfo","paginationControls","startItem","endItem","min","prevButton","nextButton","disabled","updatePlanningModeUI","planningBar","toggleBtn","toggle","item","updateSessionDisplay","sessionCount","sessionList","addBtn","getAttribute","isSelected","has","HTMLElement"],"mappings":"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"}